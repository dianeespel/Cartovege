intersect_polys_corr <- st_as_sf(intersect_polys_corr)    # Vérifie la structure des données
class(intersect_polys_corr)  # Vérifie si c'est bien un objet sf
View(intersect_polys_corr)
idmap=which(colnames(intersect_polys_corr)=="id") # Find id column index
intersect_polys_corr$Dominant_class <- NA # Initialization of new column Dominant_class
idmap=which(colnames(intersect_polys_corr)=="id") # Find id column index
ih4sample=which(colnames(intersect_polys_corr)=="Hab_L4.1") # Find the 2nd Hab_L4 column index
ID_list <- unique(intersect_polys_corr[, idmap]) # Create a list of unique IDs from the "idsample" column of intersect_polys_corr_corr
print(unique(ID_list))
for (i in ID_list) {
#  Filter intersect_polys_corr_corr for polygon i
print(paste0("on récupère tous les samples présents dans chaque polygone ", i," de la carte"))
polygon_of_interest <- intersect_polys_corr[intersect_polys_corr[[idmap]] == i, ]
polygon_of_interest <- st_as_sf(polygon_of_interest)
# Apply get_class_dom() to find the dominant class of the "ih4sample" column in the polygon of interest
print(paste0("on cherche la classe dominante parmis les samples sélectionnés"))
dominant_class <- get_class_dom(polygon_of_interest[[ih4sample]])
# Fill the Dominant_class column with the dominant value (if >1 dominant value, take the 1st one)
intersect_polys_corr[intersect_polys_corr[[idmap]] == i, "Dominant_class"] <- dominant_class[1]
}
st_geometry(intersect_polys_corr)
View(intersect_polys_corr)
ID_list
i=2629
polygon_of_interest <- intersect_polys_corr[intersect_polys_corr[[idmap]] == i, ]
polygon_of_interest <- st_as_sf(polygon_of_interest)
View(polygon_of_interest)
# Apply get_class_dom() to find the dominant class of the "ih4sample" column in the polygon of interest
print(paste0("on cherche la classe dominante parmis les samples sélectionnés"))
dominant_class <- get_class_dom(polygon_of_interest[[ih4sample]])
# Fill the Dominant_class column with the dominant value (if >1 dominant value, take the 1st one)
intersect_polys_corr[intersect_polys_corr[[idmap]] == i, "Dominant_class"] <- dominant_class[1]
View(intersect_polys_corr)
for (i in ID_list) {
print(i)
}
#  Filter intersect_polys_corr_corr for polygon i
print(paste0("on récupère tous les samples présents dans chaque polygone ", i," de la carte"))
intersect_polys_corr[[idmap]]
for (i in ID_list) {
print(i)
}
ID_list <- unique(intersect_polys_corr[[idmap]]) # Create a list of unique IDs from the "idsample" column of intersect_polys_corr_corr
for (i in ID_list) {
print(i)
}
#  Filter intersect_polys_corr_corr for polygon i
print(paste0("on récupère tous les samples présents dans chaque polygone ", i," de la carte"))
polygon_of_interest <- intersect_polys_corr[intersect_polys_corr[[idmap]] == i, ]
polygon_of_interest <- st_as_sf(polygon_of_interest)
View(polygon_of_interest)
# Apply get_class_dom() to find the dominant class of the "ih4sample" column in the polygon of interest
print(paste0("on cherche la classe dominante parmis les samples sélectionnés"))
dominant_class <- get_class_dom(polygon_of_interest[[ih4sample]])
# Fill the Dominant_class column with the dominant value (if >1 dominant value, take the 1st one)
intersect_polys_corr[intersect_polys_corr[[idmap]] == i, "Dominant_class"] <- dominant_class[1]
View(intersect_polys_corr)
for (i in ID_list) {
#  Filter intersect_polys_corr_corr for polygon i
print(paste0("on récupère tous les samples présents dans chaque polygone ", i," de la carte"))
polygon_of_interest <- intersect_polys_corr[intersect_polys_corr[[idmap]] == i, ]
polygon_of_interest <- st_as_sf(polygon_of_interest)
# Apply get_class_dom() to find the dominant class of the "ih4sample" column in the polygon of interest
print(paste0("on cherche la classe dominante parmis les samples sélectionnés"))
dominant_class <- get_class_dom(polygon_of_interest[[ih4sample]])
# Fill the Dominant_class column with the dominant value (if >1 dominant value, take the 1st one)
intersect_polys_corr[intersect_polys_corr[[idmap]] == i, "Dominant_class"] <- dominant_class[1]
}
View(intersect_polys_corr)
# Add points in habitat code to fit with the typology of POLYGONS_MAP
intersect_polys_corr$Dominant_class<- sapply(intersect_polys_corr$Dominant_class, transform_chain)
View(intersect_polys_corr)
# Correct the intersect_polys classification with the dominant_class value
ih1map=which(colnames(intersect_polys_corr)=="Hab_L1")
ih2map=which(colnames(intersect_polys_corr)=="Hab_L2")
ih3map=which(colnames(intersect_polys_corr)=="Hab_L3")
ih4map=which(colnames(intersect_polys_corr)=="Hab_L4")
intersect_polys_corr$New_hab=intersect_polys_corr$Dominant_class
intersect_polys_corr[,ih1map]=substr(intersect_polys_corr$New_hab, 1, 1) # take the  first character of the column (ex: "B")
intersect_polys_corr[,ih2map]=substr(intersect_polys_corr$New_hab, 1, 3) ## take the  3 characters of the column  (ex: "B.1")
intersect_polys_corr[,ih3map]=substr(intersect_polys_corr$New_hab, 1, 5)# take the  5 characters of the column  (ex: "B.1.1)
intersect_polys_corr[,ih4map]=intersect_polys_corr$New_hab # take all the characters (ex: "B.1.3.a")
idmap=which(colnames(intersect_polys_corr)=="id")
intersect_polys_corr=intersect_polys_corr[,1:idmap]
print("on a corrigé le dataframe des polygones intersectés")
intersect_polys_corr
polygons_map_corr <- st_as_sf(intersect_polys_corr)
polygons_map_corr
View(polygons_map_corr)
View(polygons_map)
# Define a new corrected map
polygons_map_corr <- polygons_map
ID_list
intersect_polys$id
View(intersect_polys_corr)
View(intersect_polys_corr)
View(intersect_polys)
intersect_polys_corr=intersect_polys
i=2629
polygon_of_interest <- intersect_polys_corr[intersect_polys_corr$id == i, ]
polygon_of_interest <- st_as_sf(polygon_of_interest)
View(polygon_of_interest)
idmap=which(colnames(intersect_polys_corr)=="id") # Find id column index
corrected_polygon <- intersect_polys_corr[intersect_polys_corr[[idmap]] == i, ]
View(corrected_polygon)
l=1
open_path=paste0("D:/")
LevelFolder=open_path
# Load Diversity Indices
div_files <- list.files(path = LevelFolder, pattern = "^Diversity_indices_.*\\.csv$", full.names = TRUE)
print(div_files)
div_data <- div_files %>%
lapply(read.csv, sep = ";", dec = ".") %>%
bind_rows() %>%
mutate(Year_map = as.integer(as.character(Year_map)))
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
District = 'CRO'
Island = 'POS'
Satellite1="Pleiades"
div_data <- div_files %>%
lapply(read.csv, sep = ";", dec = ".") %>%
bind_rows() %>%
mutate(Year_map = as.integer(as.character(Year_map)))
View(div_data)
div_files[1]
tab=read.csv(div_files[1])
View(tab)
# Load Diversity Indices
div_files <- list.files(path = LevelFolder, pattern = "^Diversity_indices_.*\\.csv$", full.names = TRUE)
print(div_files)
div_data <- div_files %>%
lapply(read.csv, sep = ";", dec = ".") %>%
bind_rows() %>%
mutate(Year_map = as.integer(as.character(Year_map)))
View(div_data)
div_plot <- ggplot(div_data, aes(x = Year_map)) +
geom_line(aes(y = Shannon_index, color = "Shannon")) +
geom_line(aes(y = Simpson_index, color = "Simpson")) +
geom_line(aes(y = Pielou_index, color = "Pielou")) +
labs(title = "Diversity Indices Over Time",
x = "Year",
y = "Index Value",
color = "Index") +
theme_minimal() +
scale_color_manual(values = c("Shannon" = "darkgreen", "Simpson" = "steelblue", "Pielou" = "darkorange"))
print(div_plot)
# Load landscape files
landscape_files <- list.files(path = LevelFolder,
pattern = "^Landscape_metrics_final_map_RF_FLAT_model_.*\\.csv$",
full.names = TRUE)
landscape_data <- landscape_files %>%
lapply(function(f) {
df <- read.csv(f, sep = ";", dec = ".")
# Extract year and typology level from filename
year <- str_extract(f, "\\d{4}")
level <- str_extract(f, "level_(\\d)") %>% str_remove("level_")
df$Year <- as.integer(year)
df$Typo_level <- as.integer(level)
return(df)
}) %>%
bind_rows()
View(landscape_data)
# Reshape before plotting
metrics_long <- landscape_data %>%
pivot_longer(cols = c(
Relative_abundance,
Mean_patch_size_m2,
Min_patch_size_m2,
Max_patch_size_m2,
Total_patch_size_m2,
Mean_perimeter_m,
Largest_patch_index,
Mean_euclidian_distance
),
names_to = "Metric",
values_to = "Value")
landscape_plot <- ggplot(metrics_long, aes(x = Year, y = Value, color = Hab, group = Hab)) +
geom_line() +
facet_wrap(~ Metric, scales = "free_y") + # to create a sub graph by metric
labs(title = "Évolution temporelle des métriques paysagères par habitat",
x = "Année", y = "Valeur", color = "Habitat") +
theme_minimal()+
theme(legend.position = "bottom")
print(landscape_plot)
landscape_plot <- ggplot(metrics_long, aes(x = Year, y = Value, color = Hab, group = Hab)) +
geom_point() +
facet_wrap(~ Metric, scales = "free_y") + # to create a sub graph by metric
labs(title = "Évolution temporelle des métriques paysagères par habitat",
x = "Année", y = "Valeur", color = "Habitat") +
theme_minimal()+
theme(legend.position = "bottom")
print(landscape_plot)
div_plot <- ggplot(div_data, aes(x = Year_map)) +
geom_line(aes(y = Shannon_index, color = "Shannon")) +
geom_line(aes(y = Simpson_index, color = "Simpson")) +
geom_line(aes(y = Pielou_index, color = "Pielou")) +
labs(title = "Diversity Indices Over Time",
x = "Year",
y = "Index Value",
color = "Index") +
theme_minimal() +
scale_color_manual(values = c("Shannon" = "darkgreen", "Simpson" = "steelblue", "Pielou" = "darkorange"))
print(div_plot)
div_plot <- ggplot(div_data, aes(x = Year_map)) +
geom_point(aes(y = Shannon_index, color = "Shannon")) +
geom_point(aes(y = Simpson_index, color = "Simpson")) +
geom_point(aes(y = Pielou_index, color = "Pielou")) +
labs(title = "Diversity Indices Over Time",
x = "Year",
y = "Index Value",
color = "Index") +
theme_minimal() +
scale_color_manual(values = c("Shannon" = "darkgreen", "Simpson" = "steelblue", "Pielou" = "darkorange"))
print(div_plot)
div_plot <- ggplot(div_data, aes(x = as.factor(Year_map)) +
geom_point(aes(y = Shannon_index, color = "Shannon")) +
geom_point(aes(y = Simpson_index, color = "Simpson")) +
geom_point(aes(y = Pielou_index, color = "Pielou")) +
labs(title = "Diversity Indices Over Time",
x = "Year",
y = "Index Value",
color = "Index") +
theme_minimal() +
scale_color_manual(values = c("Shannon" = "darkgreen", "Simpson" = "steelblue", "Pielou" = "darkorange"))
print(div_plot)
div_plot <- ggplot(div_data, aes(x =as.factor(Year_map))) +
geom_point(aes(y = Shannon_index, color = "Shannon")) +
geom_point(aes(y = Simpson_index, color = "Simpson")) +
geom_point(aes(y = Pielou_index, color = "Pielou")) +
labs(title = "Diversity Indices Over Time",
x = "Year",
y = "Index Value",
color = "Index") +
theme_minimal() +
scale_color_manual(values = c("Shannon" = "darkgreen", "Simpson" = "steelblue", "Pielou" = "darkorange"))
print(div_plot)
div_plot <- ggplot(div_data, aes(x =as.factor(Year_map))) +
geom_line(aes(y = Shannon_index, color = "Shannon")) +
geom_line(aes(y = Simpson_index, color = "Simpson")) +
geom_line(aes(y = Pielou_index, color = "Pielou")) +
labs(title = "Diversity Indices Over Time",
x = "Year",
y = "Index Value",
color = "Index") +
theme_minimal() +
scale_color_manual(values = c("Shannon" = "darkgreen", "Simpson" = "steelblue", "Pielou" = "darkorange"))
print(div_plot)
point
point
div_plot <- ggplot(div_data, aes(x =as.factor(Year_map))) +
geom_point(aes(y = Shannon_index, color = "Shannon")) +
geom_point(aes(y = Simpson_index, color = "Simpson")) +
geom_point(aes(y = Pielou_index, color = "Pielou")) +
labs(title = "Diversity Indices Over Time",
x = "Year",
y = "Index Value",
color = "Index") +
theme_minimal() +
scale_color_manual(values = c("Shannon" = "darkgreen", "Simpson" = "steelblue", "Pielou" = "darkorange"))
print(div_plot)
landscape_plot <- ggplot(metrics_long, aes(x = as.factor(Year), y = Value, color = Hab, group = Hab)) +
geom_point() +
facet_wrap(~ Metric, scales = "free_y") + # to create a sub graph by metric
labs(title = "Évolution temporelle des métriques paysagères par habitat",
x = "Année", y = "Valeur", color = "Habitat") +
theme_minimal()+
theme(legend.position = "bottom")
print(landscape_plot)
landscape_plot <- ggplot(metrics_long, aes(x = as.factor(Year), y = Value, color = Hab, group = Hab)) +
geom_point(size=2) +
facet_wrap(~ Metric, scales = "free_y") + # to create a sub graph by metric
labs(title = "Évolution temporelle des métriques paysagères par habitat",
x = "Année", y = "Valeur", color = "Habitat") +
theme_minimal()+
theme(legend.position = "bottom")
print(landscape_plot)
landscape_plot <- ggplot(metrics_long, aes(x = as.factor(Year), y = Value, color = Hab, group = Hab)) +
geom_point(size=4) +
facet_wrap(~ Metric, scales = "free_y") + # to create a sub graph by metric
labs(title = "Évolution temporelle des métriques paysagères par habitat",
x = "Année", y = "Valeur", color = "Habitat") +
theme_minimal()+
theme(legend.position = "bottom")
print(landscape_plot)
# Reshape before plotting
metrics_long <- landscape_data %>%
pivot_longer(cols = c(
Relative_abundance,
Mean_patch_size_m2,
Min_patch_size_m2,
Max_patch_size_m2,
Total_patch_size_m2,
Largest_patch_index,
Mean_euclidian_distance
),
names_to = "Metric",
values_to = "Value")
landscape_plot <- ggplot(metrics_long, aes(x = as.factor(Year), y = Value, color = Hab, group = Hab)) +
geom_point(size=3) +
facet_wrap(~ Metric, scales = "free_y") + # to create a sub graph by metric
labs(title = "Évolution temporelle des métriques paysagères par habitat",
x = "Année", y = "Valeur", color = "Habitat") +
theme_minimal()+
theme(legend.position = "bottom")
print(landscape_plot)
names(metrics_long)=c("Abondance relative","Surface moyenne d'une unité (m²)",
"Surface minimale d'une unité (m²)","Surface maximale d'une unité (m²)", "Surface totale de l'habitat (m²)",
"Largest patch index","Distance euclidienne moyenne")
landscape_plot <- ggplot(metrics_long, aes(x = as.factor(Year), y = Value, color = Hab, group = Hab)) +
geom_point(size=3) +
facet_wrap(~ Metric, scales = "free_y") + # to create a sub graph by metric
labs(title = "Évolution temporelle des métriques paysagères par habitat",
x = "Année", y = "Valeur", color = "Habitat") +
theme_minimal()+
theme(legend.position = "bottom")
print(landscape_plot)
# Reshape before plotting
metrics_long <- landscape_data %>%
pivot_longer(cols = c(
Relative_abundance,
Mean_patch_size_m2,
Min_patch_size_m2,
Max_patch_size_m2,
Total_patch_size_m2,
Largest_patch_index,
Mean_euclidian_distance
),
names_to = "Metric",
values_to = "Value")
landscape_plot <- ggplot(metrics_long, aes(x = as.factor(Year), y = Value, color = Hab, group = Hab)) +
geom_point(size=3) +
facet_wrap(~ Metric, scales = "free_y") + # to create a sub graph by metric
labs(title = "Évolution temporelle des métriques paysagères par habitat",
x = "Année", y = "Valeur", color = "Habitat") +
theme_minimal()+
theme(legend.position = "bottom")
print(landscape_plot)
landscape_plot <- ggplot(metrics_long, aes(x = as.factor(Year), y = Value, color = Hab, group = Hab)) +
geom_point(size=2.5) +
facet_wrap(~ Metric, scales = "free_y") + # to create a sub graph by metric
labs(title = "Évolution temporelle des métriques paysagères par habitat",
x = "Année", y = "Valeur", color = "Habitat") +
theme_minimal()+
theme(legend.position = "bottom")
print(landscape_plot)
div_plot <- ggplot(div_data, aes(x =as.factor(Year_map))) +
geom_point(aes(y = Shannon_index, color = "Shannon")) +
geom_point(aes(y = Simpson_index, color = "Simpson")) +
geom_point(aes(y = Pielou_index, color = "Pielou")) +
labs(title = "Diversity Indices Over Time",
x = "Year",
y = "Index Value",
color = "Index") +
theme_minimal() +
scale_color_manual(values = c("Shannon" = "darkgreen", "Simpson" = "steelblue", "Pielou" = "darkorange"))
print(div_plot)
div_plot <- ggplot(div_data, aes(x =as.factor(Year_map))) +
geom_point(aes(y = Shannon_index, color = "Shannon"),size=2.5) +
geom_point(aes(y = Simpson_index, color = "Simpson"),size=2.5) +
geom_point(aes(y = Pielou_index, color = "Pielou"),size=2.5) +
labs(title = "Diversity Indices Over Time",
x = "Year",
y = "Index Value",
color = "Index") +
theme_minimal() +
scale_color_manual(values = c("Shannon" = "darkgreen", "Simpson" = "steelblue", "Pielou" = "darkorange"))
print(div_plot)
landscape_plot <- ggplot(metrics_long, aes(x = as.factor(Year), y = Value, color = Hab, group = Hab)) +
geom_point(size=2.5) +
facet_wrap(~ Metric, scales = "free_y") + # to create a sub graph by metric
labs(title = "Évolution temporelle des métriques paysagères par habitat",
x = "Année", y = "Valeur", color = "Habitat") +
theme_minimal()+
theme(legend.position = "bottom")+
scale_color_manual(values = c("Shannon" = "darkgreen", "Simpson" = "steelblue", "Pielou" = "darkorange"))
print(landscape_plot)
landscape_plot <- ggplot(metrics_long, aes(x = as.factor(Year), y = Value, color = Hab, group = Hab)) +
geom_point(size=2.5) +
facet_wrap(~ Metric, scales = "free_y") + # to create a sub graph by metric
labs(title = "Évolution temporelle des métriques paysagères par habitat",
x = "Année", y = "Valeur", color = "Habitat") +
theme_minimal()+
theme(legend.position = "bottom")
print(landscape_plot)
landscape_plot <- ggplot(metrics_long, aes(x = as.factor(Year), y = Value, color = Hab, group = Hab)) +
geom_point(size=2.5) +
facet_wrap(~ Metric, scales = "free_y") + # to create a sub graph by metric
scale_color_viridis_d(option = "D") +  # Palette viridis discrète
labs(title = "Évolution temporelle des métriques paysagères par habitat",
x = "Année", y = "Valeur", color = "Habitat") +
theme_minimal()+
theme(legend.position = "bottom")
print(landscape_plot)
div_plot <- ggplot(div_data, aes(x =as.factor(Year_map))) +
geom_point(aes(y = Shannon_index, color = "Shannon"),size=2.5) +
geom_point(aes(y = Simpson_index, color = "Simpson"),size=2.5) +
geom_point(aes(y = Pielou_index, color = "Pielou"),size=2.5) +
labs(title = "Diversity Indices Over Time",
x = "Year",
y = "Index Value",
color = "Index") +
theme_minimal() +
#scale_color_manual(values = c("Shannon" = "darkgreen", "Simpson" = "steelblue", "Pielou" = "darkorange"))
# to create a sub graph by metric
scale_color_viridis_d(option = "D")  # Palette viridis discrète
print(div_plot)
set.seed(42) # for reproducibility
n <- 100 # number of samples
bands <- paste0("Band", 1:5) # 5 spectral bands
# Simulate the data
df <- data.frame(
ID = 1:n,
Hab_L1 = sample(paste0("L1_", LETTERS[1:5]), n, replace = TRUE),
Hab_L2 = sample(paste0("L2_", LETTERS[1:6]), n, replace = TRUE),
Hab_L3 = sample(paste0("L3_", LETTERS[1:8]), n, replace = TRUE),
Hab_L4 = sample(paste0("L4_", LETTERS[1:10]), n, replace = TRUE),
xcoord_m = runif(n, 500000, 501000),
ycoord_m = runif(n, 7650000, 7651000)
)
# Add 5 artificial spectral bands with numeric values
for (b in bands) {
df[[b]] <- rnorm(n, mean = 100, sd = 20)
}
# Save as CSV (adapt path as needed)
#write.csv2(df, file = "Learning_plots_CRO_POS_Pleiades_2021_ALL_SOURCES_EPSG32739.csv", row.names = FALSE)
# Save as CSV (adapt path as needed)
#write.csv2(df, file = "Learning_plots_CRO_POS_Pleiades_2021_ALL_SOURCES_EPSG32739.csv", row.names = FALSE)
learning_data=df
# Define the maximum level of habitat classification
maxTypoLevel=4
l=
# Select columns to remove depending on the level
variables_to_remove <- c("ID", "xcoord_m", "ycoord_m", paste0("Hab_L", setdiff(1:maxTypoLevel, l)))
# Filter the relevant columns
spectral_df <- learning_data[, !(names(learning_data) %in% variables_to_remove)]
# Rename habitat column to a generic name
colnames(spectral_df)[colnames(spectral_df) == paste0("Hab_L", l)] <- "hab_col"
library(FactoMineR)
library(factoextra)
library(dplyr)
library(ggplot2)
# Compute means and medians by habitat class
means_df<- aggregate(. ~ hab_col, data = spectral_df, FUN = mean)
# Rename habitat column to a generic name
colnames(spectral_df)[colnames(spectral_df) == paste0("Hab_L", l)] <- "hab_col"
# Compute means and medians by habitat class
means_df<- aggregate(. ~ hab_col, data = spectral_df, FUN = mean)
View(spectral_df)
View(learning_data)
colnames(spectral_df)
# Select columns to remove depending on the level
variables_to_remove <- c("ID", "xcoord_m", "ycoord_m", paste0("Hab_L", setdiff(1:maxTypoLevel, l)))
# Filter the relevant columns
spectral_df <- learning_data[, !(names(learning_data) %in% variables_to_remove)]
View(spectral_df)
View(learning_data)
variables_to_remove
l
l=2
# Select columns to remove depending on the level
variables_to_remove <- c("ID", "xcoord_m", "ycoord_m", paste0("Hab_L", setdiff(1:maxTypoLevel, l)))
variables_to_remove
# Rename habitat column to a generic name
colnames(spectral_df)[colnames(spectral_df) == paste0("Hab_L", l)] <- "hab_col"
# Compute means and medians by habitat class
means_df<- aggregate(. ~ hab_col, data = spectral_df, FUN = mean)
colnames(spectral_df)
# Select columns to remove depending on the level
variables_to_remove <- c("ID", "xcoord_m", "ycoord_m", paste0("Hab_L", setdiff(1:maxTypoLevel, l)))
# Filter the relevant columns
spectral_df <- learning_data[, !(names(learning_data) %in% variables_to_remove)]
View(spectral_df)
# Rename habitat column to a generic name
colnames(spectral_df)[colnames(spectral_df) == paste0("Hab_L", l)] <- "hab_col"
View(spectral_df)
# Compute means and medians by habitat class
means_df<- aggregate(. ~ hab_col, data = spectral_df, FUN = mean)
medians_df<- aggregate(. ~ hab_col, data = spectral_df, FUN = median)
# Set row names using habitat labels
rownames(means_df)   <- means_df$hab_col
rownames(medians_df) <- medians_df$hab_col
# Extract only numeric variables
quantitative_vars_means   <- means_df[, -1]
quantitative_vars_medians <- medians_df[, -1]
# Perform hierarchical clustering
hc_means   <- hclust(dist(quantitative_vars_means))
hc_medians <- hclust(dist(quantitative_vars_medians))
dendro_plot_means <- fviz_dend(hc_means, cex = 0.5, k = 10, color_labels_by_k = TRUE, rect = TRUE) +
labs(title = paste("Dendrogram of Means - Level", l))
print(dendro_plot_means)
# Define maximum number of clusters
n_classes <- nrow(quantitative_vars_means)
k_clusters <- min(10, n_classes)  # maximum 10, ou moins si pas possible
k_clusters <- min(100, n_classes)  # maximum 10, ou moins si pas possible
k_clusters <- min(50, n_classes)  # maximum 10, ou moins si pas possible
dendro_plot_means <- fviz_dend(hc_means, cex = 0.5, k = k_clusters, color_labels_by_k = TRUE, rect = TRUE) +
labs(title = paste("Dendrogram of Means - Level", l))
print(dendro_plot_means)
dendro_plot_medians <- fviz_dend(hc_medians, cex = 0.5, k =k_clusters, color_labels_by_k = TRUE, rect = TRUE) +
labs(title = paste("Dendrogram of Medians - Level", l))
print(dendro_plot_medians)
n_classes
# Select columns to remove depending on the level
variables_to_remove <- c("ID", "xcoord_m", "ycoord_m",
paste0("Hab_L", setdiff(1:maxTypoLevel, l), "_corr"),
paste0("Hab_L", 1:maxTypoLevel))
print(variables_to_remove)
View(means_df)
tinytex::install_tinytex()
